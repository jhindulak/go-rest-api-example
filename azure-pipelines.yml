trigger:
  - master

pr:
  - master

variables:
  imageName: 'jasonhindulak/go-rest-api-example'

# For running integrations tests
resources:
  containers:
    - container: postgres
      image: postgres:12
      ports:
        - 5432:5432
      env:
        POSTGRES_PASSWORD: thispasswordissecret
        POSTGRES_DB: contacts

stages:
- stage: CI
  displayName: CI
  jobs:

  ################################################################################
  - job: CI
  ################################################################################
    services:
      postgres: postgres
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      
      - script: |
          go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
          ~/go/bin/golangci-lint run ./...
        displayName: Go Lint

      - task: HelmInstaller@1
        displayName: Helm installer
        inputs:
          helmVersionToInstall: 2.14.3

      - script: helm lint $(System.DefaultWorkingDirectory)/deployments/helm/go-rest-api/ --strict
        displayName: Helm Lint

      - script: |
          go test ./... -v -cover
        displayName: Unit Tests
        continueOnError: true

      - script: |
          mkdir dist
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o dist/go-rest-api -v main.go
        displayName: Build

      - script: |
          go get -u github.com/jstemmer/go-junit-report
          export token_password="secretpassword" MASTER_USERNAME="postgres" MASTER_PASSWORD="thispasswordissecret" \
            DB_NAME="contacts" ENDPOINT_ADDRESS="localhost" DB_PORT="5432"
          go test -tags=integration ./... -v -cover 2>&1 | ~/go/bin/go-junit-report -set-exit-code > report.xml
        displayName: Integration Tests

      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
        condition: always()
        displayName: Publish Test Results

      - script: docker build -t $(imageName):$(build.buildId) -t $(imageName):latest .
        displayName: Docker Build

      # Copies Helm chart to $(Build.ArtifactStagingDirectory)
      - task: HelmDeploy@0
        inputs:
          command: 'package'
          chartPath: '$(System.DefaultWorkingDirectory)/deployments/helm/go-rest-api'
          chartVersion: '1.0.0'
        displayName: Package Helm Chart

      # Copies files to $(Build.ArtifactStagingDirectory)/terraform
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/deployments'
          Contents: 'terraform/**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        displayName: Copy Terraform directory to $(Build.ArtifactStagingDirectory)

      - script: |
          docker login -u $(dockerId) -p $(dockerPassword)
          docker push $(imageName):$(build.buildId)
          docker push $(imageName):latest
        displayName: Docker Push
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      # Artifacts found at $AGENT_BUILDDIRECTORY/artifacts
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'artifacts'
        displayName: Publish Pipeline Artifacts in $(Build.ArtifactStagingDirectory)
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- stage: Deploy_Dev
  displayName:  Deploy to Dev
  dependsOn: CI
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:

  ################################################################################
  - deployment: Deploy_Dev
  ################################################################################
    
    displayName: Deploy to Dev
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-qa'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.9'
            displayName: Terraform Installer

          - task: TerraformTaskV1@0
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: $(Agent.BuildDirectory)/artifacts/terraform
              backendServiceAWS: 'platform-engineering-admin'
              backendAWSBucketName: 'go-contacts-terraform'
              backendAWSKey: 'go-contacts/state/dev/terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: Terraform Apply
            inputs:
              provider: 'aws'
              command: 'apply'
              workingDirectory: '$(Agent.BuildDirectory)/artifacts/terraform'
              commandOptions: '-auto-approve -var-file="$(Agent.BuildDirectory)/artifacts/terraform/development/terraform.tfvars" -var "database_password=$(qa_database_password)"'
              environmentServiceNameAWS: 'platform-engineering-admin'

          - script: |
              echo "##vso[task.setvariable variable=database_address]$(terraform output database_address)"
              echo "##vso[task.setvariable variable=database_name]$(terraform output database_name)"
              echo "##vso[task.setvariable variable=database_username]$(terraform output database_username)"
              echo "##vso[task.setvariable variable=database_password]$(terraform output database_password)"
              echo "##vso[task.setvariable variable=database_port]$(terraform output database_port)"
              echo "##vso[task.setvariable variable=route53_record]$(terraform output route53_record)"
            displayName: Set Environment Variables from Terraform

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/artifacts/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-dev'
              namespace: 'go-api-dev'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-dev'
              overrideValues: 'image.tag=$(build.buildId),ingress.hosts[0].host=$(route53_record),config.token_password="thisdoesntmatter",config.listen_port="8080",config.MASTER_USERNAME=$(database_username),config.MASTER_PASSWORD=$(database_password),config.DB_NAME=$(database_name),config.ENDPOINT_ADDRESS=$(database_address)'

- stage: Deploy_Staging
  displayName:  Deploy to Staging
  dependsOn: Deploy_Dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:

  ################################################################################
  - deployment: Deploy_Staging
  ################################################################################
    displayName: Deploy to Staging
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-staging'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.9'
            displayName: Terraform Installer

          - task: TerraformTaskV1@0
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: $(Agent.BuildDirectory)/artifacts/terraform
              backendServiceAWS: 'platform-engineering-admin'
              backendAWSBucketName: 'go-contacts-terraform'
              backendAWSKey: 'go-contacts/state/staging/terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: Terraform Apply
            inputs:
              provider: 'aws'
              command: 'apply'
              workingDirectory: '$(Agent.BuildDirectory)/artifacts/terraform'
              commandOptions: '-auto-approve -var-file="$(Agent.BuildDirectory)/artifacts/terraform/staging/terraform.tfvars" -var "database_password=$(staging_database_password)"'
              environmentServiceNameAWS: 'platform-engineering-admin'

          - script: |
              echo "##vso[task.setvariable variable=database_address]$(terraform output database_address)"
              echo "##vso[task.setvariable variable=database_name]$(terraform output database_name)"
              echo "##vso[task.setvariable variable=database_username]$(terraform output database_username)"
              echo "##vso[task.setvariable variable=database_password]$(terraform output database_password)"
              echo "##vso[task.setvariable variable=database_port]$(terraform output database_port)"
              echo "##vso[task.setvariable variable=route53_record]$(terraform output route53_record)"
            displayName: Set Environment Variables from Terraform

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/artifacts/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-staging'
              namespace: 'go-api-staging'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-staging'
              overrideValues: 'image.tag=$(build.buildId),ingress.hosts[0].host=$(route53_record),config.token_password="thisdoesntmatter",config.listen_port="8080",config.MASTER_USERNAME=$(database_username),config.MASTER_PASSWORD=$(database_password),config.DB_NAME=$(database_name),config.ENDPOINT_ADDRESS=$(database_address)'

- stage: Deploy_Prod
  displayName:  Deploy to Production
  dependsOn: Deploy_Staging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:

  ################################################################################
  - deployment: Deploy_Prod
  ################################################################################
    displayName: Deploy to Production
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-prod'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.9'
            displayName: Terraform Installer

          - task: TerraformTaskV1@0
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: $(Agent.BuildDirectory)/artifacts/terraform
              backendServiceAWS: 'platform-engineering-admin'
              backendAWSBucketName: 'go-contacts-terraform'
              backendAWSKey: 'go-contacts/state/prod/terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: Terraform Apply
            inputs:
              provider: 'aws'
              command: 'apply'
              workingDirectory: '$(Agent.BuildDirectory)/artifacts/terraform'
              commandOptions: '-auto-approve -var-file="$(Agent.BuildDirectory)/artifacts/terraform/production/terraform.tfvars" -var "database_password=$(prod_database_password)"'
              environmentServiceNameAWS: 'platform-engineering-admin'

          - script: |
              echo "##vso[task.setvariable variable=database_address]$(terraform output database_address)"
              echo "##vso[task.setvariable variable=database_name]$(terraform output database_name)"
              echo "##vso[task.setvariable variable=database_username]$(terraform output database_username)"
              echo "##vso[task.setvariable variable=database_password]$(terraform output database_password)"
              echo "##vso[task.setvariable variable=database_port]$(terraform output database_port)"
              echo "##vso[task.setvariable variable=route53_record]$(terraform output route53_record)"
            displayName: Set Environment Variables from Terraform

          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/artifacts/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/artifacts/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-prod'
              namespace: 'go-api-prod'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-prod'
              overrideValues: 'image.tag=$(build.buildId),ingress.hosts[0].host=$(route53_record),config.token_password="thisdoesntmatter",config.listen_port="8080",config.MASTER_USERNAME=$(database_username),config.MASTER_PASSWORD=$(database_password),config.DB_NAME=$(database_name),config.ENDPOINT_ADDRESS=$(database_address)'