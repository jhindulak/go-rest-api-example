trigger:
  - master

pr:
  - master

variables:
  imageName: 'jasonhindulak/go-rest-api-example'

  ##################### - QA - #####################
  qa_url: 'go-api-qa.platform.hyland.io'
  qa_listen_port: 8080
  qa_database_username: postgres
  qa_database_name: postgres
  qa_database_address: go-api-qa.cprcybwaayux.us-east-1.rds.amazonaws.com
  qa_token_password: thisdoesntmatter
  
  ##################### - Staging - #####################
  staging_url: 'go-api-staging.platform.hyland.io'
  staging_listen_port: 8080
  staging_database_username: postgres
  staging_database_name: postgres
  staging_database_address: go-api-staging.cprcybwaayux.us-east-1.rds.amazonaws.com
  staging_token_password: thisdoesntmatter

  ##################### - Production - #####################
  prod_url: 'go-api-prod.platform.hyland.io'
  prod_listen_port: 8080
  prod_database_username: postgres
  prod_database_name: postgres
  prod_database_address: go-api-prod.cprcybwaayux.us-east-1.rds.amazonaws.com
  prod_token_password: thisdoesntmatter

# For running integrations tests
resources:
  containers:
    - container: postgres
      image: postgres:12
      ports:
        - 5432:5432
      env:
        POSTGRES_PASSWORD: thispasswordissecret
        POSTGRES_DB: contacts

stages:
- stage: CI
  displayName: CI
  jobs:

    ################################################################################
    - job: CI
    ################################################################################
      services:
        postgres: postgres
      pool:
        vmImage: 'Ubuntu 16.04'
      steps:
      
        - script: |
            go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
            ~/go/bin/golangci-lint run ./...
          displayName: Go Lint

        - task: HelmInstaller@1
          displayName: Helm installer
          inputs:
            helmVersionToInstall: 2.14.3

        - script: helm lint $(System.DefaultWorkingDirectory)/deployments/helm/go-rest-api/ --strict
          displayName: Helm Lint

        - script: |
            go test ./... -v -cover
          displayName: Unit Tests
          continueOnError: true

        - script: |
            mkdir dist
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o dist/go-rest-api -v main.go
          displayName: Build

        - script: |
            go get -u github.com/jstemmer/go-junit-report
            export token_password="secretpassword" MASTER_USERNAME="postgres" MASTER_PASSWORD="thispasswordissecret" \
              DB_NAME="contacts" ENDPOINT_ADDRESS="localhost" DB_PORT="5432"
            go test -tags=integration ./... -v -cover 2>&1 | ~/go/bin/go-junit-report -set-exit-code > report.xml
          displayName: Integration Tests

        - task: PublishTestResults@2
          inputs:
            testRunner: JUnit
            testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
          condition: always()
          displayName: Integration Tests

        - script: docker build -t $(imageName):$(build.buildId) -t $(imageName):latest .
          displayName: Docker Build

        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: '$(System.DefaultWorkingDirectory)/deployments/helm/go-rest-api'
            chartVersion: '1.0.0'
          displayName: Package Helm Chart

        - script: |
            docker login -u $(dockerId) -p $(dockerPassword)
            docker push $(imageName):$(build.buildId)
            docker push $(imageName):latest
          displayName: Docker Push
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifact: 'helm-chart'
          displayName: Publish Helm Chart as Artifact
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- stage: Deploy_QA
  displayName:  Deploy to QA
  dependsOn: CI
  jobs:

    ################################################################################
  - deployment: Deploy_QA
    ################################################################################
    displayName: Deploy to QA
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-qa'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/helm-chart/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-qa'
              namespace: 'go-api-qa'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-qa'
              overrideValues: 'image.tag=$(build.buildId),
                               ingress.hosts[0].host=$(qa_url),
                               config.token_password=$(qa_token_password),
                               config.listen_port=$(qa_listen_port),
                               config.MASTER_USERNAME=$(qa_database_username),
                               config.MASTER_PASSWORD=$(qa_database_password),
                               config.DB_NAME=$(qa_database_name),
                               config.ENDPOINT_ADDRESS=$(qa_database_address)'
              
- stage: Deploy_Staging
  displayName:  Deploy to Staging
  dependsOn: Deploy_QA
  jobs:

  ################################################################################
  - deployment: Deploy_Staging
  ################################################################################
    displayName: Deploy to Staging
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-staging'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/helm-chart/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-staging'
              namespace: 'go-api-staging'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-staging'
              overrideValues: 'image.tag=$(build.buildId),
                               ingress.hosts[0].host=$(staging_url),
                               config.token_password=$(staging_token_password),
                               config.listen_port=$(staging_listen_port),
                               config.MASTER_USERNAME=$(staging_database_username),
                               config.MASTER_PASSWORD=$(staging_database_password),
                               config.DB_NAME=$(staging_database_name),
                               config.ENDPOINT_ADDRESS=$(staging_database_address)'

- stage: Deploy_Prod
  displayName:  Deploy to Production
  dependsOn: Deploy_Staging
  jobs:

  ################################################################################
  - deployment: Deploy_Prod
  ################################################################################
    displayName: Deploy to Production
    pool:
      vmImage: 'Ubuntu 16.04'
    environment: 'pe-dev-production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: HelmInstaller@1
            displayName: Helm installer
            inputs:
              helmVersionToInstall: 2.14.3

          - script: |
              set -euo pipefail

              if [[ ! -e $(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz) ]]; then
                  echo "Could not find Helm chart artifact at directory: $AGENT_BUILDDIRECTORY/helm-chart/"
                  exit 1
              fi
              echo "##vso[task.setvariable variable=HELM_CHART_PACKAGE]$(find $AGENT_BUILDDIRECTORY/helm-chart/go-rest-api-*.tgz)"
            displayName: Get full path to Helm Chart artifact

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'pe-dev.go-api-prod'
              namespace: 'go-api-prod'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(HELM_CHART_PACKAGE)'
              releaseName: 'go-api-prod'
              overrideValues: 'image.tag=$(build.buildId),
                               ingress.hosts[0].host=$(prod_url),
                               config.token_password=$(prod_token_password),
                               config.listen_port=$(prod_listen_port),
                               config.MASTER_USERNAME=$(prod_database_username),
                               config.MASTER_PASSWORD=$(prod_database_password),
                               config.DB_NAME=$(prod_database_name),
                               config.ENDPOINT_ADDRESS=$(prod_database_address)'